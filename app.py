from flask import Flask, render_template, Response,request,send_file,jsonify
import json
import cv2
import random
from google.cloud import storage
import os
import datetime
import base64






os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = 'website-director-1538776176473-1e38ca8f24d4.json'
storage_client = storage.Client()

bucket_obj = storage_client.get_bucket('hvp_axiogram')


app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
#@app.route('/')
#def index():
 #   return render_template('input.html')
 

 
 
 
 
def coordinates(point,value):
            

            c1 = [(175,68),(175,86),(175,100),(175,117),(175,132),(175,146),(175,161),(175,174),(175,190),(175,207),(175,220),(175,237),(175,252),(175,267),(175,278),(175,294),(175,308),(175,324),(175,339),(175,354),(175,371),(175,381),(175,399),(175,413),(175,428),(175,444),(175, 458),(175,475),(175,487),(175,502),(175,520),(175,532),(175,548),(175,564),(175,580),(175,590),(175,606),(175,622),(175,636),(175,652),(175,667),(175,684),(175,696)]
            c2 = [(224,68),(224,86),(224,100),(224,117),(224,132),(224,146),(224,161),(224,174),(224,190),(224,207),(224,220),(224,237),(224,252),(224,267),(224,278),(224,294),(224,308),(224,324),(224,339),(224,354),(224,371),(224,381),(224,399),(224,413),(224,428),(224,444),(224, 458),(224,475),(224,487),(224,502),(224,520),(224,532),(224,548),(224,564),(224,580),(224,590),(224,606),(224,622),(224,636),(224,652),(224,667),(224,684),(224,696)]
            c3 = [(270,68),(270,86),(270,100),(270,117),(270,132),(270,146),(270,161),(270,174),(270,190),(270,207),(270,220),(270,237),(270,252),(270,267),(270,278),(270,294),(270,308),(270,324),(270,339),(270,354),(270,371),(270,381),(270,399),(270,413),(270,428),(270,444),(270, 458),(270,475),(270,487),(270,502),(270,520),(270,532),(270,548),(270,564),(270,580),(270,590),(270,606),(270,622),(270,636),(270,652),(270,667),(270,684),(270,696)]
            c4 = [(316,64),(316,72),(316, 82),(316,92),(316,104),(316,115),(316,124),(316,135),(316,147),(316,158),(316,168),(316,176),(316,187),(316,198),(316,210),(316,220),(316,231),(316,241),(316,252),(316,262),(316,272),(316,280),(316,292),(316, 302),(316,312),(316,324),(316, 334),(316,344),(316, 355),(316,365),(316,376),(316,386),(316,396),(316,407),(316, 420),(316,430),(316,441),(316,450),(316, 461),(316,472),(316, 480),(316,490),(316,500),(316,512),(316,521),(316,532),(316,544),(316, 553),(316,565),(316, 576),(316, 584),(316,592),(316,604),(316,612),(316,624),(316,635),(316,646),(316,657),(316,668),(316, 676),(316, 689),(316, 699)]
            c5 = [(359,76),(359,100),(359,124),(359,148),(359,183),(359,209),(359,233),(359,256),(359,288),(359,312),(359,336),(359,362),(359,390),(359,416),(359,440),(359,464),(359,496),(359,520),(359,545),(359,569),(359,597),(359,624),(359,648),(359,670),(359,696)]
            c6 = [(406,63),(406,72),(406,82),(406,92),(406,104),(406,115),(406,126),(406,135),(406,147),(406,157),(406,166),(406,176),(406,188),(406,197),(406,209),(406,220),(406,230),(406,240),(406,251),(406,263),(406,272),(406,279),(406,289),(406,301),(406,313),(406,324),(406, 334),(406,344),(406,356),(406,365),(406,376),(406,387),(406,397),(406,408),(406,419),(406,429),(406,440),(406,450),(406,460),(406,472),(406,480),(406,491),(406,500),(406,512),(406,522),(406,532),(406,544),(406,555),(406,565),(406,575),(406,584),(406,592),(406,603),(406,614),(406,625),(406,634),(406,645),(406,656),(406,666),(406,679),(406,688),(406,696)]
            c7 = [(452,116),(452,203),(452,219),(452,234),(452,249),(452,266),(452,277),(452,293),(452,309),(452,323),(452,339),(452,354),(452,369),(452,380),(452,398),(452,413),(452,428),(452,444),(452,459),(452,475),(452,488),(452,503),(452,520),(452,535),(452,550),(452,564),(452, 580),(452,589),(452,607),(452,622),(452,637),(452,653),(452,668),(452,684),(452,696)]
            c8 = [(497,116),(497,203),(497,219),(497,234),(497,249),(497,266),(497,277),(497,293),(497,309),(497,323),(497,339),(497,354),(497,369),(497,380),(497,398),(497,413),(497,428),(497,444),(497,459),(497,475),(497,488),(497,503),(497,520),(497,535),(497,550),(497,564),(497, 580),(497,589),(497,607),(497,622),(497,637),(497,653),(497,668),(497,684),(497,696)]
            c9 = [(544,116),(544,203),(544,219),(544,234),(544,249),(544,266),(544,277),(544,293),(544,309),(544,323),(544,339),(544,354),(544,369),(544,380),(544,398),(544,413),(544,428),(544,444),(544,459),(544,475),(544,488),(544,503),(544,520),(544,535),(544,550),(544,564),(544, 580),(544,589),(544,607),(544,622),(544,637),(544,653),(544,668),(544,684),(544,696)]
            c10 = [(591,68),(591,86),(591,100),(591,117),(591,132),(591,146),(591,161),(591,174),(591,190),(591,207),(591,220),(591,237),(591,252),(591,267),(591,278),(591,294),(591,308),(591,324),(591,339),(591,354),(591,371),(591,381),(591,399),(591,413),(591,428),(591,444),(591, 458),(591,475),(591,487),(591,502),(591,520),(591,532),(591,548),(591,564),(591,580),(591,590),(591,606),(591,622),(591,636),(591,652),(591,667),(591,684),(591,696)]
            c11 = [(636,63),(636,72),(636,82),(636,92),(636,104),(636,115),(636,126),(636,135),(636,147),(636,157),(636,166),(636,176),(636,188),(636,197),(636,209),(636,220),(636,230),(636,240),(636,251),(636,263),(636,272),(636,279),(636,289),(636,301),(636,313),(636,324),(636, 334),(636,344),(636,356),(636,365),(636,376),(636,387),(636,397),(636,408),(636,419),(636,429),(636,440),(636,450),(636,460),(636,472),(636,480),(636,491),(636,500),(636,512),(636,522),(636,532),(636,544),(636,555),(636,565),(636,575),(636,584),(636,592),(636,603),(636,614),(636,625),(636,634),(636,645),(636,656),(636,666),(636,679),(636,688),(636,696)]
            c12 = [(681,76),(681,100),(681,124),(681,148),(681,183),(681,209),(681,233),(681,256),(681,288),(681,312),(681,336),(681,362),(681,390),(681,416),(681,440),(681,464),(681,496),(681,520),(681,545),(681,569),(681,597),(681,624),(681,648),(681,670),(681,696)]
            c13 = [(726,114),(726,221),(726,328),(726,376),(726,429),(726,534),(726,636),(726,672),(726,696)]
            c14 = [(774,72),(774,96),(774,132),(774,157),(774,176),(774,206),(774,238),(774,261),(774,280),(774,305),(774,340),(774,369),(774,384),(774,412),(774,442),(774,470),(774,485),(774,516),(774,547),(774,576),(774,593),(774,624),(774,651),(774,681),(774,695)]
            c15 = [(824,71),(824,133),(824,199),(824,260),(824,340),(824,413),(824,469),(824,547),(824,608),(824,683),(824,697)]
        
            c16 = [(865,63),(865,66),(865,69),(865,72),(865,76),(865,78),(865,79),(865,82),(865,83),(865,85),(865,86),(865,88),(865,90),(865,91),(865,94),(865,95),(865,98),(865,99),(865,100),(865,102),(865,103),(865,103),(865,106),(865,107),(865,109),(865,111),(865,113),(865,115),(865,117),(865,119),(865,121),(865,121),(865,122),(865,123),(865,123),(865,125),(865,130),(865,131),(865,133),(865,137),(865,138),(865,140),(865,143),(865,145),(865,146),(865,149),(865,151),(865,152),(865,154),(865,155),(865,156),(865,158),(865,159),(865,162),(865,164),(865,172),(865,182),(865,190),(865,198),(865,204),(865,212),(865,215),(865,220),(865,226),(865,231),(865,235),(865,243),(865,249),(865,257),(865,265),(865,276),(865,285),(865,293),(865,299),(865,310),(865,316),(865,319),(865,323),(865,327),(865,333),(865,337),(865,345),(865,352),(865,360),(865,370),(865,380),(865,390),(865,397),(865,407),(865,413),(865,419),(865,425),(865,428),(865,434),(865,438),(865,444),(865,451),(865,460),(865,467),(865,474),(865,487),(865,496),(865,505),(865,511),(865,519),(865,523),(865,527),(865,533),(865,537),(865,541),(865,547),(865,555),(865,564),(865,573),(865,579),(865,588),(865,597),(865,607),(865,611),(865,621),(865,628),(865,631),(865,637),(865,640),(865,646),(865,653),(865,662),(865,668),(865,674),(865,683),(865,689),(865,695)]  

            c17 = [(907,68),(907,86),(907,100),(907,117),(907,132),(907,146),(907,161),(907,174),(907,190),(907,207),(907,220),(907,237),(907,252),(907,267),(907,278),(907,294),(907,308),(907,324),(907,339),(907,354),(907,371),(907,381),(907,399),(907,413),(907,428),(907,444),(907, 458),(907,475),(907,487),(907,502),(907,520),(907,532),(907,548),(907,564),(907,580),(907,590),(907,606),(907,622),(907,636),(907,652),(907,667),(907,684),(907,696)]
            c18 = [(958,63),(958,66),(958,69),(958,72),(958,76),(958,78),(958,79),(958,82),(958,83),(958,85),(958,86),(958,88),(958,90),(958,91),(958,94),(958,95),(958,98),(958,99),(958,100),(958,102),(958,103),(958,103),(958,106),(958,107),(958,109),(958,111),(958,113),(958,115),(958,117),(958,119),(958,121),(958,121),(958,122),(958,123),(958,123),(958,125),(958,130),(958,131),(958,133),(958,137),(958,138),(958,140),(958,143),(958,145),(958,146),(958,149),(958,151),(958,152),(958,154),(958,155),(958,156),(958,158),(958,159),(958,162),(958,164),(958,172),(958,182),(958,190),(958,198),(958,204),(958,212),(958,215),(958,220),(958,226),(958,231),(958,235),(958,243),(958,249),(958,257),(958,265),(958,276),(958,285),(958,293),(958,299),(958,310),(958,316),(958,319),(958,323),(958,327),(958,333),(958,337),(958,345),(958,352),(958,360),(958,370),(958,380),(958,390),(958,397),(958,407),(958,413),(958,419),(958,425),(958,428),(958,434),(958,438),(958,444),(958,451),(958,460),(958,467),(958,474),(958,487),(958,496),(958,505),(958,511),(958,519),(958,523),(958,527),(958,533),(958,537),(958,541),(958,547),(958,555),(958,564),(958,573),(958,579),(958,588),(958,597),(958,607),(958,611),(958,621),(958,628),(958,631),(958,637),(958,640),(958,646),(958,653),(958,662),(958,668),(958,674),(958,683),(958,689),(958,695)]  
            c19 = [(1002,68),(1002,86),(1002,100),(1002,117),(1002,132),(1002,146),(1002,161),(1002,174),(1002,190),(1002,207),(1002,220),(1002,237),(1002,252),(1002,267),(1002,278),(1002,294),(1002,308),(1002,324),(1002,339),(1002,354),(1002,371),(1002,381),(1002,399),(1002,413),(1002,428),(1002,444),(1002, 458),(1002,475),(1002,487),(1002,502),(1002,520),(1002,532),(1002,548),(1002,564),(1002,580),(1002,590),(1002,606),(1002,622),(1002,636),(1002,652),(1002,667),(1002,684),(1002,696)]
            c20 = [(1050,72),(1050,78),(1050,84),(1050,88),(1050,91),(1050,97),(1050,103),(1050,109),(1050,115),(1050,121),(1050,130),(1050,140),(1050,146),(1050,152),(1050,160),(1050,176),(1050,197),(1050,219),(1050,239),(1050,263),(1050,278),(1050,301),(1050,324),(1050,345),(1050,367),(1050,387),(1050, 408),(1050,431),(1050,450),(1050,472),(1050,489),(1050,510),(1050,532),(1050,553),(1050,575),(1050,588),(1050,612),(1050,635),(1050,656),(1050,678),(1050,696)]
            c21 = [(1096,72),(1096,99),(1096,108),(1096,116),(1096,121),(1096,131),(1096,138),(1096,146),(1096,151),(1096,159),(1096,176),(1096,197),(1096,219),(1096,239),(1096,262),(1096,278),(1096,300),(1096,324),(1096,344),(1096,367),(1096,387),(1096,407),(1096,429),(1096,452),(1096,472),(1096,488),(1096, 511),(1096,532),(1096,552),(1096,574),(1096,592),(1096,614),(1096,636),(1096,656),(1096,676),(1096,696)]
            c22 = [(1138,63),(1138,66),(1138,69),(1138,72),(1138,76),(1138,78),(1138,79),(1138,82),(1138,83),(1138,85),(1138,86),(1138,88),(1138,90),(1138,91),(1138,94),(1138,95),(1138,98),(1138,99),(1138,100),(1138,102),(1138,103),(1138,103),(1138,106),(1138,107),(1138,109),(1138,111),(1138,113),(1138,115),(1138,117),(1138,119),(1138,121),(1138,121),(1138,122),(1138,123),(1138,123),(1138,125),(1138,130),(1138,131),(1138,133),(1138,137),(1138,138),(1138,140),(1138,143),(1138,145),(1138,146),(1138,149),(1138,151),(1138,152),(1138,154),(1138,155),(1138,156),(1138,158),(1138,159),(1138,162),(1138,164),(1138,172),(1138,182),(1138,190),(1138,198),(1138,204),(1138,212),(1138,215),(1138,220),(1138,226),(1138,231),(1138,235),(1138,243),(1138,249),(1138,257),(1138,265),(1138,276),(1138,285),(1138,293),(1138,299),(1138,310),(1138,316),(1138,319),(1138,323),(1138,327),(1138,333),(1138,337),(1138,345),(1138,352),(1138,360),(1138,370),(1138,380),(1138,390),(1138,397),(1138,407),(1138,413),(1138,419),(1138,425),(1138,428),(1138,434),(1138,438),(1138,444),(1138,451),(1138,460),(1138,467),(1138,474),(1138,487),(1138,496),(1138,505),(1138,511),(1138,519),(1138,523),(1138,527),(1138,533),(1138,537),(1138,541),(1138,547),(1138,555),(1138,564),(1138,573),(1138,579),(1138,588),(1138,597),(1138,607),(1138,611),(1138,621),(1138,628),(1138,631),(1138,637),(1138,640),(1138,646),(1138,653),(1138,662),(1138,668),(1138,674),(1138,683),(1138,689),(1138,695)]  
            c23 = [(1182,68),(1182,86),(1182,100),(1182,117),(1182,132),(1182,146),(1182,161),(1182,174),(1182,190),(1182,207),(1182,220),(1182,237),(1182,252),(1182,267),(1182,278),(1182,294),(1182,308),(1182,324),(1182,339),(1182,354),(1182,371),(1182,381),(1182,399),(1182,413),(1182,428),(1182,444),(1182, 458),(1182,475),(1182,487),(1182,502),(1182,520),(1182,532),(1182,548),(1182,564),(1182,580),(1182,590),(1182,606),(1182,622),(1182,636),(1182,652),(1182,667),(1182,684),(1182,696)]
            c24 = [(1227,63),(1227,65),(1227,67),(1227,69),(1227,71),(1227,73),(1227,75),(1227,76),(1227,77),(1227,78),(1227,80),(1227,81),(1227,82),(1227,84),(1227,86),(1227,87),(1227,88),(1227,89),(1227,90),(1227,91),(1227,92),(1227,93),(1227,94),(1227,95),(1227,96),(1227,97),(1227,98),(1227,100),(1227,101),(1227,102),(1227,103),(1227,104),(1227,105),(1227,106),(1227,107),(1227,108),(1227,109),(1227,110),(1227,111),(1227,111),(1227,111),(1227,114),(1227,115),(1227,117),(1227,118),(1227,119),(1227,120),(1227,121),(1227,122),(1227,123),(1227,124),(1227,125),(1227,126),(1227,127),(1227,128),(1227,130),(1227,131),(1227,133),(1227,134),(1227,135),(1227,136),(1227,137),(1227,137),(1227,137),(1227,137),(1227,138),(1227,139),(1227,140),(1227,141),(1227,145),(1227,147),(1227,148),(1227,149),(1227,150),(1227,151),(1227,152),(1227,153),(1227,154),(1227,155),(1227,156),(1227,157),(1227,158),(1227,161),(1227,163),(1227,165),(1227,166),(1227,167),(1227,169),(1227,170),(1227,172),(1227,174),(1227,176),(1227,178),(1227,180),(1227,182),(1227,184),(1227,186),(1227,188),(1227,189),(1227,200),(1227,201),(1227,202),(1227,203),(1227,204),(1227,205),(1227,206),(1227,208),(1227,210),(1227,212),(1227,214),(1227,216),(1227,217),(1227,217),(1227,218),(1227,220),(1227,222),(1227,224),(1227,226),(1227,228),(1227,230),(1227,232),(1227,234),(1227,235),(1227,236),(1227,238),(1227,240),(1227,242),(1227,245),(1227,247),(1227,247),(1227,248),(1227,249),(1227,251),(1227,254),(1227,256),(1227,259),(1227,262),(1227,264),(1227,266),(1227,267),(1227,268),(1227,269),(1227,270),(1227,271),(1227,272),(1227,274),(1227,275),(1227,276),(1227,277),(1227,278),(1227,280),(1227,282),(1227,284),(1227,286),(1227,288),(1227,290),(1227,290),(1227,290),(1227,292),(1227,294),(1227,296),(1227,298),(1227,300),(1227,302),(1227,303),(1227,304),(1227,305),(1227,306),(1227,307),(1227,308),(1227,310),(1227,312),(1227,314),(1227,316),(1227,318),(1227,320),(1227,320),(1227,320),(1227,321),(1227,322),(1227,323),(1227,325),(1227,326),(1227,328),(1227,330),(1227,332),(1227,334),(1227,336),(1227,338),(1227,340),(1227,340),(1227,342),(1227,344),(1227,346),(1227,348),(1227,350),(1227,352),(1227,352),(1227,353),(1227,353),(1227,354),(1227,355),(1227,356),(1227,357),(1227,358),(1227,359),(1227,360),(1227,361),(1227,362),(1227,364),(1227,366),(1227,368),(1227,370),(1227,372),(1227,373),(1227,374),(1227,375),(1227,376),(1227,377),(1227,378),(1227,379),(1227,380),(1227,382),(1227,383),(1227,385),(1227,387),(1227,389),(1227,391),(1227,393),(1227,393),(1227,395),(1227,395),(1227,396),(1227,396),(1227,397),(1227,398),(1227,400),(1227,401),(1227,403),(1227,404),(1227,405),(1227,406),(1227,407),(1227,408),(1227,409),(1227,411),(1227,412),(1227,412),(1227,414),(1227,416),(1227,417),(1227,418),(1227,419),(1227,420),(1227,421),(1227,422),(1227,423),(1227,424),(1227,425),(1227,426),(1227,427),(1227,428),(1227,430),(1227,431),(1227,432),(1227,433),(1227,435),(1227,436),(1227,437),(1227,438),(1227,439),(1227,440),(1227,441),(1227,442),(1227,444),(1227,446),(1227,447),(1227,448),(1227,449),(1227,450),(1227,451),(1227,452),(1227,453),(1227,454),(1227,456),(1227,456),(1227,457),(1227, 458),(1227,460),(1227,462),(1227,464),(1227,466),(1227,468),(1227,470),(1227,471),(1227,472),(1227,473),(1227,474),(1227,476),(1227,478),(1227,479),(1227,480),(1227,481),(1227,481),(1227,482),(1227,483),(1227,484),(1227,485),(1227,485),(1227,485),(1227,486),(1227,486),(1227,487),(1227,489),(1227,490),(1227,491),(1227,492),(1227,493),(1227,494),(1227,494),(1227,494),(1227,495),(1227,496),(1227,497),(1227,498),(1227,499),(1227,501),(1227,502),(1227,504),(1227,505),(1227,506),(1227,508),(1227,510),(1227,512),(1227,512),(1227,514),(1227,514),(1227,516),(1227,516),(1227,516),(1227,516),(1227,517),(1227,518),(1227,520),(1227,521),(1227,523),(1227,524),(1227,525),(1227,526),(1227,527),(1227,528),(1227,529),(1227,530),(1227,531),(1227,531),(1227,531),(1227,532),(1227,533),(1227,535),(1227,536),(1227,537),(1227,538),(1227,539),(1227,540),(1227,541),(1227,542),(1227,543),(1227,544),(1227,545),(1227,546),(1227,547),(1227,548),(1227,550),(1227,552),(1227,553),(1227,554),(1227,555),(1227,556),(1227,557),(1227,558),(1227,559),(1227,560),(1227,561),(1227,561),(1227,561),(1227,562),(1227,563),(1227,564),(1227,565),(1227,566),(1227,567),(1227,568),(1227,569),(1227,570),(1227,571),(1227,572),(1227,573),(1227,574),(1227,575),(1227,576),(1227,577),(1227,578),(1227,579),(1227,580),(1227,581),(1227,582),(1227,583),(1227,584),(1227,585),(1227,586),(1227,587),(1227,587),(1227,587),(1227,587),(1227,587),(1227,588),(1227,589),(1227,590),(1227,591),(1227,592),(1227,593),(1227,595),(12276),(1227,597), (1227,598),(1227,599),(1227,600),(1227,600),(1227,601),(1227,602),(1227,603),(1227,604),(1227,605),(1227,606),(1227,608),(1227,609),(1227,610),(1227,611),(1227,612),(1227,613),(1227,614),(1227,615),(1227,616),(1227,617),(1227,618),(1227,618),(1227,619),(1227,620),(1227,621),(1227,621),(1227,622),(1227,623),(1227,624),(1227,625),(1227,626),(1227,627),(1227,628),(1227,629),(1227,630),(1227,631),(1227,632),(1227,633),(1227,634),(1227,634),(1227,634),(1227,635),(1227,635),(1227,636),(1227,637),(1227,638),(1227,639),(1227,640),(1227,641),(1227,642),(1227,643),(1227,644),(1227,645),(1227,646),(1227,647),(1227,648),(1227,649),(1227,650),(1227,650),(1227,650),(1227,651),(1227,652),(1227,653),(1227,654),(1227,655),(1227,656),(1227,657),(1227,658),(1227,659),(1227,660),(1227,661),(1227,662),(1227,663),(1227,664),(1227,664),(1227,665),(1227,665),(1227,666),(1227,667),(1227,668),(1227,669),(1227,670),(1227,671),(1227,672),(1227,673),(1227,674),(1227,675),(1227,676),(1227,677),(1227,678),(1227,679),(1227,680),(1227,681),(1227,682),(1227,683),(1227,684),(1227,685),(1227,686),(1227,687),(1227,689),(1227,690),(1227,691),(1227,692),(1227,693),(1227,694),(1227,695),(1227,696),(1227,697),(1227,698)]

            c25 = [(1272,72),(1272,82),(1272,91),(1272,100),(1272,106),(1272,116),(1272,124),(1272,132),(1272,140),(1272,149),(1272,157),(1272,168),(1272,174),(1272,181),(1272,184),(1272,190),(1272,197),(1272,204),(1272,211),(1272,215),(1272,219),(1272,225),(1272,230),(1272,236),(1272,243),(1272,250),(1272, 260),(1272,266),(1272,270),(1272,273),(1272,276),(1272,279),(1272,283),(1272,287),(1272,292),(1272,298),(1272,302),(1272,308),(1272,312),(1272,315),(1272,318),(1272,323),(1272,327),(1272,331),(1272,340),(1272,344),(1272,346),(1272,350),(1272,353),(1272,357),(1272,361),(1272,366),(1272,370),(1272,372),(1272,374),(1272,376),(1272,380),(1272,384),(1272,386),(1272,389),(1272,391),(1272,395),(1272,399),(1272,401),(1272,407),(1272,412),(1272,416),(1272,419),(1272,422),(1272,424),(1272,427),(1272, 431),(1272,435),(1272,439),(1272,443),(1272,447),(1272,451),(1272,454),(1272,456),(1272,459),(1272,462),(1272,465),(1272,468),(1272,474),(1272,476),(1272,478),(1272,480),(1272,484),(1272,486),(1272,488),(1272,492),(1272,494),(1272,496),(1272,500),(1272,502),(1272,504),(1272,508),(1272,510),(1272,514),(1272,516),(1272,520),(1272,524),(1272,526),(1272,528),(1272,530),(1272,533),(1272,536),(1272,538),(1272,539),(1272,543),(1272,546),(1272,548),(1272,551),(1272,555),(1272,558),(1272,559),(1272,565),(1272,567),(1272,570),(1272,571),(1272,574),(1272,575),(1272,579),(1272,581),(1272,583),(1272,584),(1272,587),(1272,588),(1272,591),(1272,592),(1272,595),(1272,597),(1272,599),(1272,600),(1272,603),(1272,605),(1272,606),(1272,609),(1272,611),(1272,613),(1272,617),(1272,618),(1272,623),(1272,627),(1272,630),(1272,631),(1272,634),(1272,635),(1272,637),(1272,640),(1272,642),(1272,645),(1272,647),(1272,649),(1272,651),(1272,656),(1272,661),(1272,663),(1272,665),(1272,666),(1272,669),(1272,674),(1272,675),(1272,678),(1272,679),(1272,682),(1272,683),(1272,686),(1272,689),(1272,691),(1272,694),(1272,697)]
            c26 = [(1320,696),(1320,682),(1320,675),(1320,667),(1320,660),(1320,649),(1320,642),(1320,631),(1320,619),(1320,605),(1320,589),(1320,576),(1320,561),(1320,550),(1320,537),(1320,528),(1320,520),(1320,509),(1320,502),(1320,495),(1320,483),(1320,471),(1320,459),(1320,448),(1320,440),(1320,433),(1320,422),(1320,410),(1320,401),(1320,392),(1320,382),(1320,368),(1320,356),(1320,346),(1320,339),(1320,323),(1320,312),(1320,305),(1320,295),(1320,286),(1320,275),(1320,259),(1320,248),(1320,242),(1320,228),(1320,213),(1320,202),(1320,190),(1320,185),(1320,180),(1320,172),(1320,157),(1320,146),(1320,138),(1320,126),(1320,115),(1320,101),(1320,92),(1320,85),(1320,77),(1320,73),(1320,66)]
            if value.isdigit() == True:
                value = int(value)
            
            if point == 0:
                
                B1 = (c1[value-1])
                return B1
            if point == 1:
                B2 = (c2[value-1])
                return B2
            if point == 2:
                B3 = (c3[value-1])
                return B3
            if point == 3:
                B4 = (c4[value-21])
                return B4
            if point == 4:
                
                B5 = (c5[value])
                return B5
            if point == 5:
                B6 = (c6[value-1])
                return B6
            if point == 6:
                B7 = (c7[value])
                return B7
            if point == 7:
                B8 = (c8[value])
                return B8
            if point == 8:
                
                B9 = (c9[value])
                return B9
            if point == 9:
                B10 = (c10[value-1])
                return B10
            if point == 10:
                B11 = (c11[value-1])
                return B11
            if point == 11:
                B12 = (c12[value])
                return B12
            if point == 12:
                B13 = (c13[value])
                return B13
            if point == 13:
                B14 = (c14[value-50])
                return B14
            if point == 15:
                B16 = (c16[value-1])
                return B16
            if point == 16:
                B17 = (c17[value-1])
                return B17
            if point == 17:
                
                B18 = (c18[value-1])
                return B18
            if point == 18:
                B19 = (c19[value-1])
                return B19
            if point == 21:
                B22 = (c22[value-1])
                return B22
            if point == 22:
                B23 = (c23[value-1])
                return B23
            if point == 23:
                
                B24 = (c24[value-1])
                return B24
            if point == 24:
                B25 = (c25[value-1])
                return B25
            if point == 25:
                B26 = (c26[value-39])
                return B26
            if point == 14 and value == '1.000':
                B15 = (c15[0])
                return B15
            if point == 14 and value  == '.950':
                B15 = (c15[1])
                return B15
            if point == 14 and value == '.900':
                B15 = (c15[2]) 
                return B15
            if point == 14 and value == '.850':
                B15 = (c15[3]) 
                return B15
            if point == 14 and value == '.800':
                B15 = (c15[4]) 
                return B15
            if point == 14 and value == '.750':
                B15 = (c15[5]) 
                return B15
            if point == 14 and value == '.700':
                B15 = (c15[6]) 
                return B15
            if point == 14 and value == '.650':
                B15 = (c15[7]) 
                return B15
            if point == 14 and value == '.600':
                B15 = (c15[8]) 
                return B15
            if point == 14 and value == '.550':
                B15 = (c15[9]) 
                return B15
            if point == 14 and value == '.500':
                B15 = (c15[10]) 
                return B15
            if point == 19 and value ==".1":
                B20 = (c20[0]) 
                return B20
            if point == 19 and value == ".2":
                B20 = (c20[1])
                return B20
            if point == 19 and value ==".3":
                B20 = (c20[2]) 
                return B20
            if point == 19 and value == ".4":
                B20 = (c20[3]) 
                return B20
            if point == 19 and value == ".5":
                B20 = (c20[4]) 
                return B20
            if point == 19 and value == ".6":
                B20 = (c20[5]) 
                return B20
            if point == 19 and value == ".7":
                B20 = (c20[6]) 
                return B20
            if point == 19 and value == ".8":
                B20 = (c20[7]) 
                return B20
            if point == 19 and value == ".9":
                B20 = (c20[8]) 
                return B20
            if point == 19 and value == "1.0":
                B20 = (c20[9]) 
                return B20
            if point == 19 and value == "1.1":
                B20 = (c20[10]) 
                return B20
            if point == 19 and value =="1.2":
                B20 = (c20[11]) 
                return B20
            if point == 19 and value =="1.3":
                B20 = (c20[12]) 
                return B20
            if point == 19 and value == "1.4":
                B20 = (c20[13]) 
                return B20
            if point == 19 and value == "1.5":
                B20 = (c20[14]) 
                return B20
            if point == 19 and value == "1.6":
                B20 = (c20[15]) 
                return B20
            if point == 19 and value == "1.7":
                B20 = (c20[16]) 
                return B20
            if point == 19 and value == "1.8":
                B20 = (c20[17]) 
                return B20
            if point == 19 and value == "1.9":
                B20 = (c20[18]) 
                return B20
            if point == 19 and value == "2.0":
                B20 = (c20[19]) 
                return B20
            if point == 19 and value == "2.1":
                B20 == (c20[20])
                return B20
            if point == 19 and value == "2.2":
                B20 == (c20[21]) 
                return B20
            if point == 19 and value == "2.3":
                B20 = (c20[22]) 
                return B20
            if point == 19 and value == "2.4":
               B20 = (c20[23]) 
               return B20
            if point == 19 and value == "2.5":
                B20 = (c20[24]) 
                return B20
            if point == 19 and value == "2.6":
                B20 = (c20[25]) 
                return B20
            if point == 19 and value == "2.7":
                B20 = (c20[26]) 
                return B20
            if point == 19 and value == "2.8":
                B20 = (c20[27]) 
                return B20
            if point == 19 and value == "2.9":
                B20 = (c20[28])
                return B20
            if point == 19 and value == "3.0":
                B20 = (c20[29]) 
                return B20
            if point == 19 and value == "3.1":
                B20 = (c20[30]) 
                return B20
            if point == 19 and value == "3.2":
                B20 = (c20[31]) 
                return B20
            if point == 19 and value == "3.3":
                B20 = (c20[32]) 
                return B20
            if point == 19 and value == "3.4":
                B20 = (c20[33]) 
                return B20
            if point == 19 and value == "3.5":
                B20 = (c20[34])
                return B20
            if point == 19 and value == "3.6":
                B20 = (c20[35]) 
                return B20
            if point == 19 and value == "3.7":
                B20 = (c20[36])
                return B20
            if point == 19 and value == "3.8":
                B20 = (c20[37])
                return B20
            if point == 19 and value == "3.9":
                B20 = (c20[38]) 
                return B20
            if point == 19 and value == "4.0":
                B20 = (c20[39]) 
                return B20
            if point == 19 and value == "4.1":
                B20 = (c20[40]) 
                return B20
            if point == 20 and value == ".6":
                B21 = (c21[0]) 
                return B21
            if point == 20 and value == ".7":
                B21 = (c21[1]) 
                return B21
            if point == 20 and value == ".8":
                B21 = (c21[2])
                return B21
            if point == 20 and value == ".9":
                B21 = (c21[3]) 
                return B21
            if point == 20 and value == "1.0":
                B21 = (c21[4])
                return B21
            if point == 20 and value == "1.1":
                B21 = (c21[5])
                return B21
            if point == 20 and value == "1.2":
                B21 = (c21[6])
                return B21
            if point == 20 and value == "1.3":
                B21 = (c21[7]) 
                return B21
            if point == 20 and value == "1.4":
                B21 = (c21[8])
                return B21
            if point == 20 and value == "1.5":
                B21 = (c21[9])
                return B21
            if point == 20 and value == "1.6":
                B21 = (c21[10]) 
                return B21
            if point == 20 and value == "1.7":
                B21 = (c21[11])
                return B21
            if point == 20 and value == "1.8":
                B21 = (c21[12])
                return B21
            if point == 20 and value == "1.9":
                B21 = (c21[13]) 
                return B21
            if point == 20 and value == "2.0":
                B21 = (c21[14]) 
                return B21
            if point == 20 and value == "2.1":
                B21 = (c21[15]) 
                return B21
            if point == 20 and value == "2.2":
                B21 = (c21[16]) 
                return B21
            if point == 20 and value == "2.3":
                B21 = (c21[17]) 
                return B21
            if point == 20 and value == "2.4":
                B21 = (c21[18])
                return B21
            if point == 20 and value == "2.5":
                B21 = (c21[19])
                return B21
            if point == 20 and value == "2.6":
                B21 = (c21[20]) 
                return B21
            if point == 20 and value == "2.7":
                B21 = (c21[21]) 
                return B21
            if point == 20 and value == "2.8":
                B21 = (c21[22]) 
                return B21
            if point == 20 and value == "2.9":
                B21 = (c21[23]) 
                return B21
            if point == 20 and value == "3.0":
                B21 = (c21[24]) 
                return B21
            if point == 20 and value == "3.1":
                B21 = (c21[25])
                return B21
            if point == 20 and value == "3.2":
                B21 = (c21[26]) 
                return B21
            if point == 20 and value == "3.3":
                B21 = (c21[27])
                return B21
            if point == 20 and value == "3.4":
                B21 = (c21[28]) 
                return B21
            if point == 20 and value =="3.5":
                B21 = (c21[29]) 
                return B21
            if point == 20 and value == "3.6":
                B21 = (c21[30]) 
                return B21
            if point == 20 and value == "3.7":
                B21 = (c21[31])
                return B21
            if point == 20 and value == "3.8":
                B21 = (c21[32]) 
                return B21
            if point == 20 and value == "3.9":
                B21 = (c21[33]) 
                return B21
            if point == 20 and value == "4.0":
                B21 = (c21[34]) 
                return B21
            if point == 20 and value == "4.1":
                B21 = (c21[35])
                return B21


@app.route('/', methods=['POST','GET'])
def sub():
   if request.method == "POST":
      
        pna1 = (request.values.get('blue1'))
     
        pna2 = (request.values.get('blue2'))
        
        pna3 = (request.values.get('blue3'))
        pna4 = (request.values.get('blue4') )
        pna5 = (request.values.get('blue5'))
        pna6 = (request.values.get('blue6'))
        pna7 = (request.values.get('blue7'))
        pna8 = (request.values.get('blue8'))
        pna9 = (request.values.get('blue9'))
        pna10 = (request.values.get('blue10'))
        pna11 = (request.values.get('blue11'))
        pna12 = (request.values.get('blue12'))
        pna13 = (request.values.get('blue13'))
        pna14 = (request.values.get('blue14'))
        pna15 = request.values.get('blue15')
        pna16 = (request.values.get('blue16'))
        pna17 = (request.values.get('blue17'))
        pna18 = (request.values.get('blue18'))
        pna19 = (request.values.get('blue19'))
        pna20 = request.values.get('blue20')
        pna21 = request.values.get('blue21')
        pna22 = (request.values.get('blue22'))
        pna23 = (request.values.get('blue23'))
        pna24 = (request.values.get('blue24'))
        pna25 = (request.values.get('blue25'))
        pna26 = (request.values.get('blue26'))
        pra1 = (request.values.get('red1'))
      
        pra2 = (request.values.get('red2'))
       
        pra3 = (request.values.get('red3'))
        pra4 = (request.values.get('red4') )
        pra5 = (request.values.get('red5'))
        pra6 = (request.values.get('red6'))
        pra7 = (request.values.get('red7'))
        pra8 = (request.values.get('red8'))
        pra9 = (request.values.get('red9'))
        pra10 = (request.values.get('red10'))
        pra11 = (request.values.get('red11'))
        pra12 = (request.values.get('red12'))
        pra13 = (request.values.get('red13'))
        pra14 = (request.values.get('red14'))
        pra15 = request.values.get('red15')
        pra16 = (request.values.get('red16'))
        pra17 = (request.values.get('red17'))
        pra18 = (request.values.get('red18'))
        pra19 = (request.values.get('red19'))
        pra20 = request.values.get('red20')
        pra21 = request.values.get('red21')
        pra22 = (request.values.get('red22'))
        pra23 = (request.values.get('red23'))
        pra24 = (request.values.get('red24'))
        pra25 = (request.values.get('red25'))
        pra26 = (request.values.get('red26'))

        pba1 = (request.values.get('black1'))
      
        pba2 = (request.values.get('black2'))
       
        pba3 = (request.values.get('black3'))
        pba4 = (request.values.get('black4') )
        pba5 = (request.values.get('black5'))
        pba6 = (request.values.get('black6'))
        pba7 = (request.values.get('black7'))
        pba8 = (request.values.get('black8'))
        pba9 = (request.values.get('black9'))
        pba10 = (request.values.get('black10'))
        pba11 = (request.values.get('black11'))
        pba12 = (request.values.get('black12'))
        pba13 = (request.values.get('black13'))
        pba14 = (request.values.get('black14'))
        pba15 = request.values.get('black15')
        pba16 = (request.values.get('black16'))
        pba17 = (request.values.get('black17'))
        pba18 = (request.values.get('black18'))
        pba19 = (request.values.get('black19'))
        pba20 = request.values.get('black20')
        pba21 = request.values.get('black21')
        pba22 = (request.values.get('black22'))
        pba23 = (request.values.get('black23'))
        pba24 = (request.values.get('black24'))
        pba25 = (request.values.get('black25'))
        pba26 = (request.values.get('black26'))
        naindex = []
        finalcoordinateblue = []
        findingna = [pna1,pna2,pna3,pna4,pna5,pna6,pna7,pna8,pna9,pna10,pna11,pna12,pna13,pna14,pna15,pna16,pna17,pna18,pna19,pna20,pna21,pna22,pna23,pna24,pna25,pna26]
       
        for i in range(len(findingna)):
            if findingna[i] != "NA":
                naindex.append(i)
      
        for i in range(len(naindex)):
            vue = naindex[i]
           
            ptblue = coordinates(naindex[i],findingna[vue])
            finalcoordinateblue.append(ptblue)

        



        raindex = []
        finalcoordinatered = []
        findingra = [pra1,pra2,pra3,pra4,pra5,pra6,pra7,pra8,pra9,pra10,pra11,pra12,pra13,pra14,pra15,pra16,pra17,pra18,pra19,pra20,pra21,pra22,pra23,pra24,pra25,pra26]
       
        for i in range(len(findingra)):
            if findingra[i] != "NA":
                raindex.append(i)
       
        for i in range(len(raindex)):
            vue = raindex[i]
           
            ptred = coordinates(raindex[i],findingra[vue])
            finalcoordinatered.append(ptred)  


        baindex = []
        finalcoordinateblack = []
        findingba = [pba1,pba2,pba3,pba4,pba5,pba6,pba7,pba8,pba9,pba10,pba11,pba12,pba13,pba14,pba15,pba16,pba17,pba18,pba19,pba20,pba21,pba22,pba23,pba24,pba25,pba26]
       
        for i in range(len(findingba)):
            if findingba[i] != "NA":
                baindex.append(i)
      
        for i in range(len(baindex)):
            vue = baindex[i]
            ptblack = coordinates(baindex[i],findingba[vue])
            finalcoordinateblack.append(ptblack)  
            
            
            
         
        path = 'image/before.jpg'
        path1 = 'image/after.jpg'

        image = cv2.imread(path)





       
# Window name in which image is displayed


# Start coordinate, here (0, 0)
# represents the top left corner of image

        start_point = []

        for i in range(len(finalcoordinateblue)-1):
             start_point.append(finalcoordinateblue[i])

        end_point = []

        for i in range(1,len(finalcoordinateblue)):
             end_point.append(finalcoordinateblue[i])     
# End coordinate, here (250, 250)
# represents the bottom right corner of image
        

        color = (255,0,0)


        thickness = 2

        start_point1 = []

        for i in range(len(finalcoordinatered)-1):
             start_point1.append(finalcoordinatered[i])

        end_point1 = []

        for i in range(1,len(finalcoordinatered)):
             end_point1.append(finalcoordinatered[i])     
# End coordinate, here (250, 250)
# represents the bottom right corner of image
        

        color1 = (0,0,255)


        thickness = 2

        start_point2 = []

        for i in range(len(finalcoordinateblack)-1):
             start_point2.append(finalcoordinateblack[i])

        end_point2 = []

        for i in range(1,len(finalcoordinateblack)):
             end_point2.append(finalcoordinateblack[i])     
# End coordinate, here (250, 250)
# represents the bottom right corner of image
        

        color2 = (0,0,0)


        thickness = 2


# Using cv2.line() method
# Draw a diagonal green line with thickness of 9 px
        for i in range(len(start_point)):
            image = cv2.line(image, start_point[i], end_point[i], color, thickness)
        for i in range(len(start_point1)):
            image = cv2.line(image, start_point1[i], end_point1[i], color1, thickness)  
        for i in range(len(start_point2)):
            image = cv2.line(image, start_point2[i], end_point2[i], color2, thickness)       


# Displaying the image
        cv2.imwrite(path1, image)
        final = finalcoordinateblue +  finalcoordinatered + finalcoordinateblack
        try:
                abc = final[0]
        except:
            return "No points inputed"
            

                 
        #return car_brand
        #filename = path1    

        #return send_file(filename, mimetype='image/jpg')
        
        r1  = datetime.datetime.now()

        object_name_in_gcs_bucket = bucket_obj.blob('Axiogram{}.jpg'.format(r1))

        object_name_in_gcs_bucket.upload_from_filename('image/after.jpg')
        
       
 
        data={}  
     
        with open('image/after.jpg', "rb") as image:
              encoded_string = base64.b64encode(image.read())
              encoded_string = encoded_string.decode('utf-8')
              
       
        os.remove('image/after.jpg')
        
        
        url =  'https://storage.cloud.google.com/hvp_axiogram/Axiogram{}.jpg?authuser=4'.format(r1)
        
        result = {'result':{'url':url,'imagebase':encoded_string},'Status':'200','Time':r1}
        
        return jsonify(result)

        

     
     
if __name__ == '__main__':
    app.run(port=8003,host="0.0.0.0")
